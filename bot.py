import telebot
from telebot import types
import requests
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

TOKEN = 'YOUR_TOKEN'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
GROUP_CHAT_ID = -1002133226949  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à GROUP_CHAT_ID
ADMIN_CHAT_ID = 167509764  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ADMIN_CHAT_ID
GAME_URL = 'https://html5-quiz-bot.vercel.app'

bot = telebot.TeleBot(TOKEN)
group_messages = []

@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    if chat_id == ADMIN_CHAT_ID:
        bot.send_message(chat_id, 'üåü *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞!*', parse_mode='Markdown')

    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add(types.KeyboardButton('/registration'), types.KeyboardButton('/endregistration'))
    bot.send_message(chat_id, 'üëã *–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã.*', reply_markup=markup, parse_mode='Markdown')

@bot.message_handler(commands=['registration'])
def registration(message):
    chat_id = message.chat.id
    if chat_id != ADMIN_CHAT_ID:
        bot.send_message(chat_id, "üö´ *–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞!*", parse_mode='Markdown')
        return

    markup = types.InlineKeyboardMarkup()
    registration_button = types.InlineKeyboardButton("üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data='register')
    markup.add(registration_button)
    sent_message = bot.send_message(GROUP_CHAT_ID, "üéâ *–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ!*", reply_markup=markup, parse_mode='Markdown')
    group_messages.append(sent_message.message_id)
    bot.send_message(ADMIN_CHAT_ID, "‚úÖ *–ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É!*", parse_mode='Markdown')

@bot.callback_query_handler(func=lambda call: call.data == 'register')
def handle_registration(call):
    user_id = call.from_user.id
    user_name = call.from_user.first_name
    if call.from_user.is_bot:
        bot.answer_callback_query(call.id, "ü§ñ –ë–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å!")
        return

    requests.post('http://localhost:5000/api/register', json={'user_id': user_id, 'name': user_name})
    bot.answer_callback_query(call.id, f"‚úÖ {user_name}, –≤—ã –≤ –∏–≥—Ä–µ!")
    bot.send_message(ADMIN_CHAT_ID, f'üîî *–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: {user_name} (ID: {user_id})*', parse_mode='Markdown')

@bot.message_handler(commands=['endregistration'])
def end_registration(message):
    if message.chat.id != ADMIN_CHAT_ID:
        bot.send_message(message.chat.id, "üö´ *–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞!*", parse_mode='Markdown')
        return

    for msg_id in group_messages[:]:
        try:
            bot.delete_message(GROUP_CHAT_ID, msg_id)
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")
    group_messages.clear()
    bot.send_message(GROUP_CHAT_ID, "–°—á–∞—Å—Ç–ª–∏–≤—ã—Ö –í–∞–º –≥–æ–ª–æ–¥–Ω—ã—Ö –∏–≥—Ä, –∏ –ø—É—Å—Ç—å —É–¥–∞—á–∞ –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç —Å –í–∞–º–∏!")

if __name__ == '__main__':
    bot.polling(none_stop=True)